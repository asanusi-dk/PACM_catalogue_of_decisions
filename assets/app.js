/* assets/app.js â€” grouped table + symbol-based dedupe */
(function(){
  const CATALOG_URL = 'data/a64_catalogue.json';
  const tbody = document.getElementById('doc-tbody');
  const searchBox = document.getElementById('q');
  function esc(s){ return (s||'').replace(/[&<>"']/g, m=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;' }[m])); }
  function normalizeSymbol(sym){ if(!sym) return ''; let s = sym.trim(); const mA64 = s.match(/(A6\.4-[A-Z]+(?:-[A-Z]+)*-\d{3})/i); const mUN = s.match(/(FCCC\/PA\/CMA\/\d{4}\/[\w./-]+)/i); const mCMA = s.match(/(\d+\/CMA\.\d)/i); if(mCMA) return mCMA[1]; if(mA64) return mA64[1]; if(mUN) return mUN[1]; return s; }
  function dedupeBySymbol(rows){ const seen=new Map(), out=[]; const score=(x)=>['date','version','type','section','subsection'].reduce((n,k)=>n+(x[k]?1:0),0); for(const r of rows){ const key = normalizeSymbol(r.symbol) || (r.url||'').replace(/#.*$/,''); if(!key){ out.push(r); continue; } if(seen.has(key)){ const prev=seen.get(key); if(score(r)>score(prev)){ const idx=out.indexOf(prev); if(idx>=0) out[idx]=r; seen.set(key,r);} } else { seen.set(key,r); out.push(r);} } return out; }
  function groupData(rows){ const bySec=new Map(); for(const r of rows){ const sec=r.section||'Other'; const sub=r.subsection||''; if(!bySec.has(sec)) bySec.set(sec,new Map()); const inner=bySec.get(sec); if(!inner.has(sub)) inner.set(sub,[]); inner.get(sub).push(r);} return bySec; }
  function render(){ if(!tbody) return; fetch(CATALOG_URL,{cache:'no-cache'}).then(r=>r.json()).then(data=>{ let rows=data.map(d=>({title:d.title,url:d.url,symbol:d.symbol,version:d.version||'',date:d.date||'',type:d.type||'',section:d.section||'',subsection:d.subsection||''})); rows=dedupeBySymbol(rows); const q=(searchBox&&searchBox.value||'').trim().toLowerCase(); if(q){ rows=rows.filter(r=>(r.title||'').toLowerCase().includes(q)||(r.symbol||'').toLowerCase().includes(q)); } rows.sort((a,b)=>(a.section||'').localeCompare(b.section||'')||(a.subsection||'').localeCompare(b.subsection||'')||(a.title||'').localeCompare(b.title||'')); const grouped=groupData(rows); const parts=[]; const colSpan=4; for(const [sec,subMap] of grouped){ parts.push(`<tr class="group-row"><td colspan="${colSpan}">${esc(sec)}</td></tr>`); for(const [sub,items] of subMap){ if(sub){ parts.push(`<tr class="subgroup-row"><td colspan="${colSpan}">${esc(sub)}</td></tr>`);} for(const r of items){ const title=esc(r.title); const symbol=esc(normalizeSymbol(r.symbol)); const ver=esc(r.version||''); const date=esc(r.date||''); parts.push(`<tr class="doc-row"><td class="cell-title"><a href="${esc(r.url)}" target="_blank" rel="noopener">${title}</a></td><td class="cell-symbol">${symbol}</td><td class="cell-version">${ver}</td><td class="cell-date">${date}</td></tr>`); } } } tbody.innerHTML=parts.join('\n'); }).catch(err=>{ console.error('Render error',err); if(tbody) tbody.innerHTML=`<tr><td colspan="4" class="error">Failed to load catalogue.</td></tr>`; }); }
  if(searchBox){ searchBox.addEventListener('input',()=>render()); }
  document.addEventListener('DOMContentLoaded',render); window.PACM_renderTable=render; })();
